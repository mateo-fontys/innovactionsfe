stages:
  - build
  - dockerize
  - deploy

variables:
  # Frontend-specific variables
  DOCKER_BUILDKIT: 1
  IMAGE_NAME: "$ACR_NAME.azurecr.io/innovactions-frontend"
  IMAGE_TAG: "$IMAGE_NAME:latest"

# STEP 1: Build Angular Application (Frontend)
build:
  stage: build
  image: node:18-alpine
  script:
    - echo "=== Building Angular Application ==="
    - npm ci
    - npm install -g @angular/cli
    - ng build --configuration=production
  artifacts:
    paths:
      - dist/
    expire_in: 1 day

# STEP 2: Build and Push Docker Image to ACR
dockerize:
  stage: dockerize
  script:
    - echo "=== Logging into Azure ==="
    - az login --service-principal --username $env:AZURE_CLIENT_ID --password $env:AZURE_CLIENT_SECRET --tenant $env:AZURE_TENANT_ID
    - az account set --subscription $env:AZURE_SUBSCRIPTION_ID

    - echo "=== Logging into Azure Container Registry ==="
    - az acr login --name $env:ACR_NAME

    - echo "=== Building Docker Image ==="
    - echo "IMAGE_NAME is $env:IMAGE_NAME"
    - echo "Docker tag will be $env:IMAGE_TAG"
    - docker build -t $env:IMAGE_TAG -f Dockerfile .
    - docker push $env:IMAGE_TAG

# STEP 3: Configure Azure App Service to use the latest container
deploy:
  stage: deploy
  image: mcr.microsoft.com/azure-cli
  script:
    - echo "=== Authenticating with Azure ==="
    - az login --service-principal --username $env:AZURE_CLIENT_ID --password $env:AZURE_CLIENT_SECRET --tenant $env:AZURE_TENANT_ID
    - az account set --subscription $env:AZURE_SUBSCRIPTION_ID

    - echo "=== Updating App Service to use latest image ==="
    - $image = "$env:IMAGE_NAME" + ":latest"
    - echo "Full image name $image"
    - az webapp config container set --name $env:AZURE_APP_NAME --resource-group $env:AZURE_RESOURCE_GROUP --container-image-name $image --container-registry-url https://$env:ACR_NAME.azurecr.io
    # - az webapp restart --name $env:AZURE_APP_NAME --resource-group $env:AZURE_RESOURCE_GROUP

